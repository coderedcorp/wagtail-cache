# Add steps that analyze code, save build artifacts, deploy, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/python
#
# NOTES:
#
# Display name of each step should be prefixed with one of the following:
#   CR-QC: for quality control measures.
#   CR-BUILD: for build-related tasks.
#   CR-DEPLOY: for publication or deployment.
#   [no prefix]: for unrelated CI setup/tooling.
#
# Use PowerShell Core for any utility scripts so they are re-usable across
# Windows, macOS, and Linux.
#


trigger:
  - main
  - release/*


stages:
- stage: Unit_Tests
  displayName: Unit Tests

  jobs:
  - job: pytest
    displayName: pytest
    pool:
      vmImage: 'ubuntu-latest'
    strategy:
      matrix:
        py3.8_wag3:
          PYTHON_VERSION: '3.8'
          WAGTAIL: '3.*'
        py3.9_wag4:
          PYTHON_VERSION: '3.9'
          WAGTAIL: '4.*'
        py3.10_wag5:
          PYTHON_VERSION: '3.10'
          WAGTAIL: '5.*'
        py3.11_wag5:
          PYTHON_VERSION: '3.11'
          WAGTAIL: '5.*'

    steps:
    - task: UsePythonVersion@0
      displayName: 'Use Python version'
      inputs:
        versionSpec: '$(PYTHON_VERSION)'
        architecture: 'x64'

    - script: python -m pip install -r requirements-dev.txt wagtail==$(WAGTAIL)
      displayName: 'CR-QC: Install from local repo'

    - script: |
        cd testproject/
        python manage.py makemigrations --check
      displayName: 'CR-QC: Check migrations'

    - script: pytest ./testproject/
      displayName: 'CR-QC: Run unit tests'

    - task: PublishTestResults@2
      displayName: 'Publish unit test report'
      condition: succeededOrFailed()
      inputs:
        testResultsFiles: '**/test-*.xml'
        testRunTitle: 'Publish test results for Python $(python.version)'

    - task: PublishCodeCoverageResults@1
      displayName: 'Publish code coverage report'
      condition: succeededOrFailed()
      inputs:
        codeCoverageTool: Cobertura
        summaryFileLocation: '$(System.DefaultWorkingDirectory)/coverage.xml'


- stage: Static_Analysis
  displayName: Static Analysis
  dependsOn: Unit_Tests
  condition: succeeded('Unit_Tests')
  jobs:
  - job: lint
    displayName: Linters
    pool:
      vmImage: 'ubuntu-latest'

    steps:
    - task: UsePythonVersion@0
      displayName: 'Use Python version'
      inputs:
        versionSpec: '3.11'
        architecture: 'x64'

    - script: python -m pip install -r requirements-dev.txt
      displayName: 'CR-QC: Install from local repo'

    - script: codespell ./docs/ ./wagtailcache/
      displayName: 'CR-QC: Spell check'

    - script: flake8 .
      displayName: 'CR-QC: Static analysis (flake8)'

    - script: isort --check .
      displayName: 'CR-QC: Format check (isort)'

    - script: black --check .
      displayName: 'CR-QC: Format check (black)'

    - script: mypy ./wagtailcache/
      displayName: 'CR-QC: Type check (mypy)'

  - job: codecov
    displayName: Code Coverage
    pool:
      vmImage: 'ubuntu-latest'

    steps:
    - task: DownloadBuildArtifacts@0
      displayName: 'Download code coverage from current build'
      inputs:
        buildType: 'current'
        project: '$(System.TeamProjectId)'
        pipeline: '$(System.DefinitionId)'
        downloadType: 'specific'
        downloadPath: '$(Agent.WorkFolder)/current-artifacts'

    - pwsh: ./ci/compare-codecov.ps1 -wd $Env:WorkDir
      displayName: 'CR-QC: Compare code coverage'
      failOnStderr: false
      env:
        WorkDir: $(Agent.WorkFolder)

  - job: docs
    displayName: Documentation
    pool:
      vmImage: 'ubuntu-latest'

    steps:
    - task: UsePythonVersion@0
      displayName: 'Use Python version'
      inputs:
        versionSpec: '3.11'
        architecture: 'x64'

    - script: python -m pip install -r requirements-dev.txt
      displayName: 'CR-QC: Install from local repo'

    - pwsh: sphinx-build -M html ./docs/ ./docs/_build/ -W
      displayName: 'CR-QC: Build documentation'
